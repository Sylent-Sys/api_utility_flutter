name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
  workflow_run:
    workflows:
      - Version Bump
    types:
      - completed

jobs:
  build-and-release:
    # Only proceed when triggered by workflow_run if the triggering workflow concluded successfully
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.3'
        channel: 'stable'
        cache: true
        
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test
      
    - name: Analyze code
      run: flutter analyze
      
    - name: Build Windows app
      run: flutter build windows --release
      
    - name: Sync msix_version with Flutter version
      shell: pwsh
      run: |
        $pubspec = Get-Content -Raw -Path "pubspec.yaml"
        $versionLine = ($pubspec -split "`n") | Where-Object { $_.TrimStart().StartsWith('version: ') } | Select-Object -First 1
        if (-not $versionLine) { throw "Couldn't find version in pubspec.yaml" }
        $ver = $versionLine.Split(':')[1].Trim()
        # Expect formats like 1.2.3 or 1.2.3+45
        if ($ver -match '^(\d+)\.(\d+)\.(\d+)(?:\+(\d+))?$') {
          $major = $Matches[1]; $minor = $Matches[2]; $patch = $Matches[3]; $build = if ($Matches[4]) { $Matches[4] } else { '0' }
          $msixVer = "$major.$minor.$patch.$build"
        } else {
          throw "Invalid pubspec version format: $ver"
        }
        # Update msix_version in pubspec.yaml
        $updated = [System.Text.RegularExpressions.Regex]::Replace($pubspec, '(?m)^(\s*msix_version:\s*)(.+)$', "`$1$msixVer")
        Set-Content -Path "pubspec.yaml" -Value $updated -Encoding UTF8
        Write-Host "Set msix_version to $msixVer"

    - name: Create MSIX package
      shell: pwsh
      run: |
        # Ensure dependencies are restored
        flutter pub get
        # Create MSIX without attempting to install certificate on CI
        dart run msix:create --install-certificate false
      
    - name: Create release archive
      id: build_archive
      env:
        VERSION_INPUT: ${{ github.event.inputs.version }}
      run: |
        $version = if ($env:GITHUB_REF -match 'refs/tags/(.+)') {
          $matches[1]
        } elseif ($env:VERSION_INPUT) {
          $env:VERSION_INPUT
        } else {
          # Fallback: derive from pubspec.yaml when triggered via workflow_run without tag/input
          $pubspec = Get-Content -Raw -Path "pubspec.yaml"
          $versionLine = ($pubspec -split "`n") | Where-Object { $_.TrimStart().StartsWith('version: ') } | Select-Object -First 1
          if (-not $versionLine) { throw "Couldn't find version in pubspec.yaml" }
          $ver = $versionLine.Split(':')[1].Trim()
          if ($ver -match '^(\d+)\.(\d+)\.(\d+)(?:\+(\d+))?$') {
            "v$($Matches[1]).$($Matches[2]).$($Matches[3])"
          } else {
            throw "Invalid pubspec version format: $ver"
          }
        }
        $archiveName = "api-utility-flutter-$version-windows.zip"
        
        # Create archive with the built app
        Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath $archiveName -Force
        
        # Set output for next step
        echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_OUTPUT
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT

    - name: Collect MSIX artifacts
      id: msix_artifacts
      shell: pwsh
      run: |
        # Find latest .msix and .cer generated by msix package
        $msix = Get-ChildItem -Path . -Filter *.msix -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        $cer = Get-ChildItem -Path . -Filter *.cer -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        if ($msix) { echo "MSIX_PATH=$($msix.FullName)" >> $env:GITHUB_OUTPUT }
        if ($cer) { echo "CER_PATH=$($cer.FullName)" >> $env:GITHUB_OUTPUT }
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.build_archive.outputs.VERSION || github.ref_name }}
        name: API Utility Flutter ${{ steps.build_archive.outputs.VERSION || github.ref_name }}
        body: |
          ## API Utility Flutter ${{ steps.build_archive.outputs.VERSION || github.ref_name }}
          
          ### What's New
          - Automated release build
          - Windows desktop application
          - MSIX installer package
          
          ### Installation
          1. Download the `api-utility-flutter-${{ steps.build_archive.outputs.VERSION || github.ref_name }}-windows.zip` file
          2. Extract the archive to your desired location
          3. Run `api_utility_flutter.exe`
          
          Or install via MSIX:
          1. Download the `.msix` file and, if provided, the `.cer` certificate file
          2. Install the certificate to Trusted People (if required), then open the `.msix`
          
          ### System Requirements
          - Windows 10 or later
          - Visual C++ Redistributable (if not already installed)
          
          ### Changes
          See the commit history for detailed changes.
        draft: false
        prerelease: false
        files: |
          ${{ steps.build_archive.outputs.ARCHIVE_NAME }}
          ${{ steps.msix_artifacts.outputs.MSIX_PATH }}
          ${{ steps.msix_artifacts.outputs.CER_PATH }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
